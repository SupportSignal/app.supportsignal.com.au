// @ts-nocheck
'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Card, CardHeader, CardTitle, CardContent } from '@starter/ui/card';
import { Label } from '@starter/ui/label';
import { Button } from '@starter/ui/button';
import { Alert, AlertDescription } from '@starter/ui/alert';
import { Badge } from '@starter/ui/badge';
import { AutoSaveIndicator } from '@/components/ui/auto-save-indicator';
import { useAutoSave } from '@/hooks/useAutoSave';
import { Id } from '@/convex/_generated/dataModel';

interface NarrativeGridProps {
  incidentId: Id<"incidents">;
  onComplete: (narrativeData: NarrativeData) => void;
  onBack: () => void;
}

interface NarrativeData {
  before_event: string;
  during_event: string;
  end_event: string;
  post_event: string;
}

/**
 * Multi-Phase Narrative Collection Grid - Step 2 of Incident Capture
 * Implements Story 3.1 AC 3.1.2: Multi-phase narrative collection
 * 
 * Features:
 * - 2x2 responsive grid layout for four narrative phases
 * - Large text areas optimized for detailed descriptions
 * - Real-time character counting and validation
 * - Auto-save functionality with visual indicators
 * - Minimum content requirements (at least one phase with 50+ characters)
 * - Mobile-responsive design (converts to single column on small screens)
 */
export function NarrativeGrid({ incidentId, onComplete, onBack }: NarrativeGridProps) {
  const [narrativeData, setNarrativeData] = useState<NarrativeData>({
    before_event: '',
    during_event: '',
    end_event: '',
    post_event: '',
  });

  const [errors, setErrors] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Get session token for API calls
  const sessionToken = typeof window !== 'undefined' ? localStorage.getItem('auth_session_token') : null;

  // Convex mutations
  const createNarrative = useMutation(api.narratives.create);
  const updateNarrative = useMutation(api.narratives.update);

  // Upsert function that tries update first, then create
  const upsertNarrative = async (data: NarrativeData & { sessionToken: string; incident_id: Id<"incidents"> }) => {
    try {
      // Try to update first
      await updateNarrative(data);
    } catch (error: any) {
      // If narrative doesn't exist, create it first then update
      if (error?.message?.includes('Narrative not found')) {
        await createNarrative({
          sessionToken: data.sessionToken,
          incident_id: data.incident_id,
        });
        
        // Now update with the data
        await updateNarrative(data);
      } else {
        throw error; // Re-throw other errors
      }
    }
  };

  // Auto-save hook
  const { autoSaveState, triggerSave } = useAutoSave(
    narrativeData,
    async (data) => {
      if (!sessionToken) throw new Error('No session token');
      
      await upsertNarrative({
        sessionToken,
        incident_id: incidentId,
        before_event: data.before_event,
        during_event: data.during_event,
        end_event: data.end_event,
        post_event: data.post_event,
      });
    },
    {
      debounceMs: 3000,
      enabled: !!sessionToken && !!incidentId,
      onSuccess: () => {
        console.log('üíæ AUTO-SAVE COMPLETED', {
          incidentId,
          timestamp: new Date().toISOString(),
        });
      },
      onError: (error) => {
        console.warn('Auto-save failed:', error);
      },
    }
  );

  // Load existing incident data
  const incidentData = useQuery(
    api.incidents.getDraftIncident,
    sessionToken ? { sessionToken, incidentId } : 'skip'
  );

  const updateStatus = useMutation(api.incidents.updateStatus);

  // Load existing narrative data when available
  useEffect(() => {
    if (incidentData?.narrative) {
      setNarrativeData({
        before_event: incidentData.narrative.before_event || '',
        during_event: incidentData.narrative.during_event || '',
        end_event: incidentData.narrative.end_event || '',
        post_event: incidentData.narrative.post_event || '',
      });
    }
  }, [incidentData]);

  // Participant name interpolation is now handled by the backend fillIncidentWithSampleData function

  // Sample narrative data is now generated by the backend fillIncidentWithSampleData function
  // with participant name interpolation handled server-side

  // The Fill Narrative functionality is now handled by the backend fillIncidentWithSampleData function
  // called from IncidentCaptureWorkflow.tsx. This component will automatically refresh via useQuery
  // when the incident data is updated with sample narratives.

  // Handle narrative field changes
  const handleNarrativeChange = (field: keyof NarrativeData, value: string) => {
    setNarrativeData(prev => ({ ...prev, [field]: value }));
    setErrors('');
    // Auto-save will be triggered automatically by useAutoSave hook when narrativeData changes
  };

  // Validate narratives
  const validateNarratives = (): boolean => {
    const narratives = Object.values(narrativeData);
    const hasMinimumContent = narratives.some(narrative => 
      narrative.trim().length >= 50
    );

    if (!hasMinimumContent) {
      setErrors('At least one narrative phase must contain meaningful content (minimum 50 characters)');
      return false;
    }

    return true;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateNarratives()) {
      return;
    }

    setIsSubmitting(true);

    try {
      if (!sessionToken) {
        throw new Error('No session token found');
      }

      // Save narratives
      await upsertNarrative({
        sessionToken,
        incident_id: incidentId,
        before_event: narrativeData.before_event,
        during_event: narrativeData.during_event,
        end_event: narrativeData.end_event,
        post_event: narrativeData.post_event,
      });

      // Update incident status to indicate narrative completion
      await updateStatus({
        sessionToken,
        id: incidentId,
        capture_status: 'in_progress',
      });

      console.log('üìù NARRATIVES COMPLETED', {
        incidentId,
        phasesConcluded: Object.values(narrativeData).filter(n => n.trim().length > 0).length,
        timestamp: new Date().toISOString(),
      });

      // For Story 3.2+, pass narrative data to trigger proactive question generation
      onComplete(narrativeData);
    } catch (error) {
      console.error('Failed to save narratives:', error);
      setErrors(error instanceof Error ? error.message : 'Failed to save narratives');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Get character counts for each phase
  const getCharacterCount = (text: string) => text.length;
  const getWordCount = (text: string) => text.trim() ? text.trim().split(/\s+/).length : 0;

  // Check if minimum requirements are met
  const hasMinimumContent = Object.values(narrativeData).some(narrative => 
    narrative.trim().length >= 50
  );


  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              üìù Step 2: Incident Narrative
              <span className="text-sm font-normal text-gray-500">
                (Detailed Description)
              </span>
            </div>
            <div className="flex items-center gap-4">
              {/* Auto-save Status Indicator */}
              <AutoSaveIndicator 
                autoSaveState={autoSaveState} 
                variant="status-bar" 
              />
            </div>
          </CardTitle>
          <p className="text-sm text-gray-600">
            Provide detailed descriptions for each phase of the incident. At least one phase must contain meaningful content.
          </p>
        </CardHeader>
      </Card>


      {/* Narrative Grid */}
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Before Event */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center justify-between">
                üîç Before Event
                <div className="flex gap-2">
                  <Badge variant="outline" className="text-xs">
                    {getCharacterCount(narrativeData.before_event)} chars
                  </Badge>
                  <Badge variant="outline" className="text-xs">
                    {getWordCount(narrativeData.before_event)} words
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Label className="text-sm text-gray-600 mb-2 block">
                What was happening before the incident? What were the circumstances or conditions leading up to it?
              </Label>
              <textarea
                value={narrativeData.before_event}
                onChange={(e) => handleNarrativeChange('before_event', e.target.value)}
                placeholder="Describe the situation, environment, activities, or conditions that existed before the incident occurred..."
                className="w-full h-32 p-3 border rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </CardContent>
          </Card>

          {/* During Event */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center justify-between">
                ‚ö° During Event
                <div className="flex gap-2">
                  <Badge variant="outline" className="text-xs">
                    {getCharacterCount(narrativeData.during_event)} chars
                  </Badge>
                  <Badge variant="outline" className="text-xs">
                    {getWordCount(narrativeData.during_event)} words
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Label className="text-sm text-gray-600 mb-2 block">
                What happened during the incident? Describe the event as it unfolded.
              </Label>
              <textarea
                value={narrativeData.during_event}
                onChange={(e) => handleNarrativeChange('during_event', e.target.value)}
                placeholder="Describe exactly what happened during the incident, including actions, behaviors, and sequence of events..."
                className="w-full h-32 p-3 border rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </CardContent>
          </Card>

          {/* End Event */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center justify-between">
                üèÅ End Event
                <div className="flex gap-2">
                  <Badge variant="outline" className="text-xs">
                    {getCharacterCount(narrativeData.end_event)} chars
                  </Badge>
                  <Badge variant="outline" className="text-xs">
                    {getWordCount(narrativeData.end_event)} words
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Label className="text-sm text-gray-600 mb-2 block">
                How did the incident end? What actions were taken to resolve or conclude it?
              </Label>
              <textarea
                value={narrativeData.end_event}
                onChange={(e) => handleNarrativeChange('end_event', e.target.value)}
                placeholder="Describe how the incident concluded, what interventions were used, and how the situation was resolved..."
                className="w-full h-32 p-3 border rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </CardContent>
          </Card>

          {/* Post-Event Support */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center justify-between">
                ü§ù Post-Event Support
                <div className="flex gap-2">
                  <Badge variant="outline" className="text-xs">
                    {getCharacterCount(narrativeData.post_event)} chars
                  </Badge>
                  <Badge variant="outline" className="text-xs">
                    {getWordCount(narrativeData.post_event)} words
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Label className="text-sm text-gray-600 mb-2 block">
                What support was provided after the incident? Follow-up actions or care given?
              </Label>
              <textarea
                value={narrativeData.post_event}
                onChange={(e) => handleNarrativeChange('post_event', e.target.value)}
                placeholder="Describe any immediate support, care, or follow-up provided after the incident concluded..."
                className="w-full h-32 p-3 border rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </CardContent>
          </Card>
        </div>

        {/* Validation Error */}
        {errors && (
          <Alert className="mt-4">
            <AlertDescription className="text-red-600">
              {errors}
            </AlertDescription>
          </Alert>
        )}

        {/* Form Actions */}
        <div className="flex justify-between items-center mt-6 pt-6 border-t">
          <Button
            type="button"
            variant="outline"
            onClick={onBack}
            disabled={isSubmitting}
          >
            ‚Üê Back to Incident Details
          </Button>

          <div className="flex items-center space-x-4">
            {/* Content Requirements Indicator */}
            <div className="text-sm">
              {hasMinimumContent ? (
                <Badge className="bg-green-100 text-green-800">
                  ‚úì Minimum content met
                </Badge>
              ) : (
                <Badge variant="outline" className="text-gray-600">
                  Need 50+ chars in any phase
                </Badge>
              )}
            </div>


            <Button
              type="submit"
              disabled={!hasMinimumContent || isSubmitting}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              {isSubmitting ? (
                <>
                  <span className="animate-spin mr-2">‚è≥</span>
                  Saving...
                </>
              ) : (
                'Complete Step 2 ‚Üí'
              )}
            </Button>
          </div>
        </div>

      </form>
    </div>
  );
}