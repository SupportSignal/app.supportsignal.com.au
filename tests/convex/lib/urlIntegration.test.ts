/**
 * Integration tests for URL configuration with existing Convex functions
 * Tests how the centralized URL configuration integrates with email, auth, and worker sync
 */

import {
  generatePasswordResetUrl,
  generateOAuthCallbackUrl,
  generateWorkerUrl,
  resetUrlConfig
} from '../../../apps/convex/lib/urlConfig';

// Store original environment for restoration
const originalEnv = process.env;

// Mock environment scenarios
const mockEnvironments = {
  development: {
    NEXT_PUBLIC_APP_URL: 'http://localhost:3200',
    NEXT_PUBLIC_LOG_WORKER_URL: 'https://log-ingestion-worker.david-0b1.workers.dev',
    NODE_ENV: 'development',
  },
  production: {
    NEXT_PUBLIC_APP_URL: 'https://app.supportsignal.com.au',
    NEXT_PUBLIC_LOG_WORKER_URL: 'https://log-ingestion-worker.david-0b1.workers.dev',
    NODE_ENV: 'production',
  },
} as const;

describe('URL Configuration Integration Tests', () => {
  beforeEach(() => {
    
    resetUrlConfig();
  });

  afterEach(() => {
    process.env = originalEnv;
    resetUrlConfig();
    jest.restoreAllMocks();
  });

  describe('Email Integration Scenarios', () => {
    it('should generate correct password reset URLs for email.ts integration', () => {
      process.env = { ...mockEnvironments.development };

      // Test tokens that would be generated by email.ts
      const shortToken = 'abc123def456';
      const longToken = 'very-long-secure-token-with-multiple-parts-and-special-chars';
      const tokenWithSpecialChars = 'token+with%special&chars=test';

      const shortUrl = generatePasswordResetUrl(shortToken);
      const longUrl = generatePasswordResetUrl(longToken);
      const specialUrl = generatePasswordResetUrl(tokenWithSpecialChars);

      expect(shortUrl).toBe('http://localhost:3200/reset-password?token=abc123def456');
      expect(longUrl).toBe('http://localhost:3200/reset-password?token=very-long-secure-token-with-multiple-parts-and-special-chars');
      expect(specialUrl).toBe('http://localhost:3200/reset-password?token=token%2Bwith%25special%26chars%3Dtest');
    });

    it('should generate production URLs for email integration', () => {
      process.env = { ...mockEnvironments.production };

      const token = 'prod-secure-token';
      const url = generatePasswordResetUrl(token);

      expect(url).toBe('https://app.supportsignal.com.au/reset-password?token=prod-secure-token');
    });

    it('should handle email worker integration scenarios', () => {
      process.env = { ...mockEnvironments.development };

      // Test that URL generation works for email worker calls
      const resetUrl = generatePasswordResetUrl('email-token-123');

      // Simulate email worker payload structure
      const emailPayload = {
        type: 'password_reset',
        to: 'user@example.com',
        resetUrl: resetUrl,
        token: 'email-token-123',
      };

      expect(emailPayload.resetUrl).toBe('http://localhost:3200/reset-password?token=email-token-123');
      expect(emailPayload.resetUrl).toContain('/reset-password?token=');
    });
  });

  describe('Auth Integration Scenarios', () => {
    it('should generate correct OAuth callback URLs for auth.ts integration', () => {
      process.env = { ...mockEnvironments.development };

      const githubCallback = generateOAuthCallbackUrl('github');
      const googleCallback = generateOAuthCallbackUrl('google');

      expect(githubCallback).toBe('http://localhost:3200/auth/github/callback');
      expect(googleCallback).toBe('http://localhost:3200/auth/google/callback');
    });

    it('should generate production OAuth URLs for auth integration', () => {
      process.env = { ...mockEnvironments.production };

      const githubCallback = generateOAuthCallbackUrl('github');
      const googleCallback = generateOAuthCallbackUrl('google');

      expect(githubCallback).toBe('https://app.supportsignal.com.au/auth/github/callback');
      expect(googleCallback).toBe('https://app.supportsignal.com.au/auth/google/callback');
    });

    it('should integrate with OAuth URL generation patterns from auth.ts', () => {
      process.env = { ...mockEnvironments.development };

      // Simulate OAuth URL generation patterns used in auth.ts
      const state = 'random-state-value';
      const githubRedirectUri = generateOAuthCallbackUrl('github');
      const googleRedirectUri = generateOAuthCallbackUrl('google');

      // Simulate GitHub OAuth URL construction
      const githubParams = new URLSearchParams({
        client_id: 'test-client-id',
        redirect_uri: githubRedirectUri,
        scope: 'user:email',
        state: state,
      });

      // Simulate Google OAuth URL construction
      const googleParams = new URLSearchParams({
        client_id: 'test-client-id',
        redirect_uri: googleRedirectUri,
        response_type: 'code',
        scope: 'openid email profile',
        state: state,
      });

      const githubOAuthUrl = `https://github.com/login/oauth/authorize?${githubParams.toString()}`;
      const googleOAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?${googleParams.toString()}`;

      expect(githubOAuthUrl).toContain('redirect_uri=http%3A%2F%2Flocalhost%3A3200%2Fauth%2Fgithub%2Fcallback');
      expect(googleOAuthUrl).toContain('redirect_uri=http%3A%2F%2Flocalhost%3A3200%2Fauth%2Fgoogle%2Fcallback');
    });

    it('should handle auth redirect scenarios in different environments', () => {
      // Test development environment
      process.env = { ...mockEnvironments.development };
      resetUrlConfig();

      let githubUrl = generateOAuthCallbackUrl('github');
      expect(githubUrl).toBe('http://localhost:3200/auth/github/callback');

      // Test production environment
      resetUrlConfig();
      process.env = { ...mockEnvironments.production };

      githubUrl = generateOAuthCallbackUrl('github');
      expect(githubUrl).toBe('https://app.supportsignal.com.au/auth/github/callback');
    });
  });

  describe('Worker Sync Integration Scenarios', () => {
    it('should generate correct worker URLs for workerSync.ts integration', () => {
      process.env = { ...mockEnvironments.development };

      // Test endpoints used in workerSync.ts
      const healthUrl = generateWorkerUrl('health');
      const tracesUrl = generateWorkerUrl('traces/recent');
      const logsUrl = generateWorkerUrl('logs');
      const clearUrl = generateWorkerUrl('logs/clear');

      expect(healthUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/health');
      expect(tracesUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/traces/recent');
      expect(logsUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/logs');
      expect(clearUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/logs/clear');
    });

    it('should handle worker URL with query parameters', () => {
      process.env = { ...mockEnvironments.development };

      const traceId = 'trace-123-abc';
      const userId = 'user-456-def';

      const traceLogsUrl = generateWorkerUrl(`logs?trace_id=${traceId}`);
      const userLogsUrl = generateWorkerUrl(`logs?user_id=${userId}`);

      expect(traceLogsUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/logs?trace_id=trace-123-abc');
      expect(userLogsUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/logs?user_id=user-456-def');
    });

    it('should integrate with fetch patterns from workerSync.ts', () => {
      process.env = { ...mockEnvironments.development };

      // Simulate fetch patterns used in workerSync.ts
      const healthUrl = generateWorkerUrl('health');
      const tracesUrl = generateWorkerUrl('traces/recent');

      // Mock fetch calls that would be made in workerSync.ts
      const healthFetchConfig = {
        url: healthUrl,
        method: 'GET',
      };

      const tracesFetchConfig = {
        url: tracesUrl,
        method: 'GET',
      };

      expect(healthFetchConfig.url).toBe('https://log-ingestion-worker.david-0b1.workers.dev/health');
      expect(tracesFetchConfig.url).toBe('https://log-ingestion-worker.david-0b1.workers.dev/traces/recent');
    });

    it('should handle different worker configurations', () => {
      // Test with custom worker URL
      process.env = {
        ...mockEnvironments.development,
        NEXT_PUBLIC_LOG_WORKER_URL: 'https://custom-worker.example.com',
      };

      const healthUrl = generateWorkerUrl('health');
      expect(healthUrl).toBe('https://custom-worker.example.com/health');
    });
  });

  describe('Cross-Function Integration Scenarios', () => {
    it('should maintain URL consistency across all functions', () => {
      process.env = { ...mockEnvironments.development };

      // Generate URLs that would be used across different functions
      const passwordResetUrl = generatePasswordResetUrl('token123');
      const githubCallbackUrl = generateOAuthCallbackUrl('github');
      const workerHealthUrl = generateWorkerUrl('health');

      // All URLs should use the same base URL when appropriate
      expect(passwordResetUrl.startsWith('http://localhost:3200')).toBe(true);
      expect(githubCallbackUrl.startsWith('http://localhost:3200')).toBe(true);
      expect(workerHealthUrl.startsWith('https://log-ingestion-worker.david-0b1.workers.dev')).toBe(true);
    });

    it('should handle environment switching correctly', () => {
      // Test development environment
      process.env = { ...mockEnvironments.development };
      resetUrlConfig();

      const devPasswordReset = generatePasswordResetUrl('token123');
      const devGithubCallback = generateOAuthCallbackUrl('github');

      expect(devPasswordReset.startsWith('http://localhost:3200')).toBe(true);
      expect(devGithubCallback.startsWith('http://localhost:3200')).toBe(true);

      // Switch to production environment
      resetUrlConfig();
      process.env = { ...mockEnvironments.production };

      const prodPasswordReset = generatePasswordResetUrl('token123');
      const prodGithubCallback = generateOAuthCallbackUrl('github');

      expect(prodPasswordReset.startsWith('https://app.supportsignal.com.au')).toBe(true);
      expect(prodGithubCallback.startsWith('https://app.supportsignal.com.au')).toBe(true);
    });

    it('should support realistic integration workflow', () => {
      process.env = { ...mockEnvironments.production };

      // Simulate a complete workflow that might span multiple functions
      const userEmail = 'user@example.com';
      const resetToken = 'secure-reset-token-abc123';

      // 1. Password reset URL generation (email.ts)
      const resetUrl = generatePasswordResetUrl(resetToken);

      // 2. OAuth callback URLs (auth.ts)
      const githubCallback = generateOAuthCallbackUrl('github');
      const googleCallback = generateOAuthCallbackUrl('google');

      // 3. Worker health check (workerSync.ts)
      const workerHealthUrl = generateWorkerUrl('health');

      // Verify all URLs are production-ready
      expect(resetUrl).toBe('https://app.supportsignal.com.au/reset-password?token=secure-reset-token-abc123');
      expect(githubCallback).toBe('https://app.supportsignal.com.au/auth/github/callback');
      expect(googleCallback).toBe('https://app.supportsignal.com.au/auth/google/callback');
      expect(workerHealthUrl).toBe('https://log-ingestion-worker.david-0b1.workers.dev/health');

      // Verify URL patterns are consistent and valid
      expect(resetUrl).toMatch(/^https:\/\/app\.supportsignal\.com\.au\//);
      expect(githubCallback).toMatch(/^https:\/\/app\.supportsignal\.com\.au\//);
      expect(googleCallback).toMatch(/^https:\/\/app\.supportsignal\.com\.au\//);
      expect(workerHealthUrl).toMatch(/^https:\/\/log-ingestion-worker\.david-0b1\.workers\.dev\//);
    });
  });

  describe('Error Handling Integration', () => {
    it('should handle missing environment variables consistently', () => {
      process.env = {
        // Missing NEXT_PUBLIC_APP_URL
        NODE_ENV: 'development',
      };

      // All functions should fail consistently when base URL is missing
      expect(() => generatePasswordResetUrl('token')).toThrow();
      expect(() => generateOAuthCallbackUrl('github')).toThrow();
    });

    it('should handle worker URL configuration errors', () => {
      process.env = {
        NEXT_PUBLIC_APP_URL: 'http://localhost:3200',
        NEXT_PUBLIC_LOG_WORKER_URL: '', // Explicitly empty
        NODE_ENV: 'development',
      } as any;

      resetUrlConfig(); // Force reload with empty worker URL

      // Worker functions should handle missing worker URL appropriately
      expect(() => generateWorkerUrl()).toThrow(
        'Worker URL (NEXT_PUBLIC_LOG_WORKER_URL) is not configured'
      );
    });

    it('should provide clear error messages for integration debugging', () => {
      process.env = { NODE_ENV: 'development' };

      try {
        generatePasswordResetUrl('token');
      } catch (error) {
        expect((error as Error).message).toContain('NEXT_PUBLIC_APP_URL');
        expect((error as Error).message).toContain('not set');
      }

      try {
        generateOAuthCallbackUrl('github');
      } catch (error) {
        expect((error as Error).message).toContain('NEXT_PUBLIC_APP_URL');
        expect((error as Error).message).toContain('not set');
      }
    });
  });
});